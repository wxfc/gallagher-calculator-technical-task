{"ast":null,"code":"var _jsxFileName = \"/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n  const [gross, setGross] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState(gross - tax - hi);\n  let grossCopy = Number(gross);\n  let grossSetOne;\n  let grossSetTwo;\n  let grossSetThree;\n  let taxableAmount;\n\n  const handleTax = () => {\n    if (grossCopy > 15000) {\n      console.log('handling above 15000');\n      taxableAmount = Number(grossSetTwo); // console.log(grossSetTwo)\n\n      setTax(taxableAmount * 0.2);\n    }\n  };\n\n  const handleCalculate = gr => {\n    if (gr < 15001) {\n      grossSetOne = gr;\n      console.log(grossSetOne);\n      console.log(grossSetOne);\n    } else if (gr > 15000 && gr <= 50000) {\n      grossSetOne = 15000;\n      grossSetTwo = gr - 15000;\n      handleTax();\n    } else {\n      grossSetOne = 15000;\n      grossSetTwo = 35000;\n      grossSetThree = gr - 50000;\n    }\n  };\n\n  const handleClear = () => {\n    setGross(0);\n    grossSetOne = 0;\n    grossSetTwo = 0;\n    grossSetThree = 0;\n    setTax(0);\n    setHi(0);\n    setNet(0); // clear input value\n\n    document.getElementById(\"input\").value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input\",\n      type: \"number\",\n      min: \"0\",\n      onChange: e => setGross(+e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCalculate(grossCopy),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross: \", gross]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Tax: \", tax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"HI: \", hi]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Net: \", net]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set One: \", grossSetOne]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set Two: \", grossSetTwo < 0 ? 0 : grossSetTwo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set Three: \", grossSetThree < 0 ? 0 : grossSetThree]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calculator, \"/OCHjyxGlF3ipgyYA4tyzzI3jDk=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js"],"names":["React","useState","Calculator","gross","setGross","tax","setTax","hi","setHi","net","setNet","grossCopy","Number","grossSetOne","grossSetTwo","grossSetThree","taxableAmount","handleTax","console","log","handleCalculate","gr","handleClear","document","getElementById","value","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst Calculator = () => {\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n\n  const [gross, setGross] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState(gross - tax - hi);\n\n  let grossCopy = Number(gross);\n  let grossSetOne\n  let grossSetTwo\n  let grossSetThree\n  let taxableAmount\n\n  const handleTax = () => {\n    if (grossCopy > 15000) {\n      console.log('handling above 15000')\n      taxableAmount = Number(grossSetTwo);\n      // console.log(grossSetTwo)\n\n      setTax(taxableAmount * 0.2);\n    }\n  }\n\n  const handleCalculate = (gr) => {\n    if (gr < 15001) {\n      grossSetOne = gr\n      console.log(grossSetOne)\n      console.log(grossSetOne)\n    } else if (gr > 15000 && gr <= 50000) {\n      grossSetOne = 15000\n      grossSetTwo = gr - 15000;\n      handleTax();\n    } else {\n      grossSetOne = 15000;\n      grossSetTwo = 35000;\n      grossSetThree = gr - 50000;\n    }\n  }\n\n  const handleClear = () => {\n    setGross(0);\n    grossSetOne = 0;\n    grossSetTwo = 0;\n    grossSetThree = 0;\n    setTax(0);\n    setHi(0);\n    setNet(0);\n    // clear input value\n    document.getElementById(\"input\").value = \"\";\n  }\n\n\n  return (\n    <div>\n        <input \n          id=\"input\"\n          type=\"number\"\n          min=\"0\"\n          onChange={(e)=> setGross(+e.target.value)}/>\n          <button onClick={()=> handleCalculate(grossCopy)}>Calculate</button>\n          <button onClick={handleClear}>Reset</button>\n      <ul>\n        <li>Gross: {gross}</li>\n        <li>Tax: {tax}</li>\n        <li>HI: {hi}</li>\n        <li>Net: {net}</li>\n\n        <li>Gross Set One: {grossSetOne}</li>\n        <li>Gross Set Two: {grossSetTwo < 0 ? 0 : grossSetTwo}</li>\n        <li>Gross Set Three: {grossSetThree < 0 ? 0 : grossSetThree}</li>\n      </ul>\n    </div>\n  )\n  \n\n\n\n}\n\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n  const [gross, setGross] = useState(0);\n  const [grossSetOne, setGrossSetOne] = useState(0); // 15000\n\n  const [grossSetTwo, setGrossSetTwo] = useState(0); // gross - 15000\n\n  const [grossSetThree, setGrossSetThree] = useState(0); // gross - 50000\n\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState(0);\n  let grossCopy = gross;\n  let taxableAmount;\n\n  const handleCalculate = e => {\n    e.preventDefault();\n    setGross(Number(e.target.value));\n    console.log(gross); // if (e.target.value < 15000) {\n    //   setGrossSetOne(e.target.value);\n    //   setTax(0);\n    //   setHi(0);\n    // } else if (gross > 15000 && gross <= 50000) {\n    //   setGrossSetOne(15000);\n    //   setGrossSetTwo(e.target.value - 15000);\n    //   setTax(grossSetTwo * 0.2);\n    //   setHi(grossSetTwo * 0.12);\n    // } else {\n    //   setGrossSetOne(15000);\n    //   setGrossSetTwo(35000);\n    //   setGrossSetThree(e.target.value - 50000);\n    //   // tax = 7000 + (grossSetThree * 0.4)\n    //   // hi = 4200 + (grossSetThree * 0.02)\n    // }\n    // setNet(e.target.value - tax - hi);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onSubmit: event => handleCalculate(event),\n        type: \"number\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross: \", gross]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Tax: \", tax < 0 ? 0 : tax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"HI: \", hi]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Net: \", net]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set One: \", grossSetOne]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set Two: \", grossSetTwo < 0 ? 0 : grossSetTwo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross Set Three: \", grossSetThree < 0 ? 0 : grossSetThree]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calculator, \"MtgnbX8eqlW4hirSCLcd2HyHAAM=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js"],"names":["React","useState","Calculator","gross","setGross","grossSetOne","setGrossSetOne","grossSetTwo","setGrossSetTwo","grossSetThree","setGrossSetThree","tax","setTax","hi","setHi","net","setNet","grossCopy","taxableAmount","handleCalculate","e","preventDefault","Number","target","value","console","log","event"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,CAAD,CAA9C,CAnBuB,CAmB4B;;AACnD,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C,CApBuB,CAoB6B;;AACpD,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,CAAD,CAAlD,CArBuB,CAqBgC;;AACvD,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAACY,EAAD,EAAKC,KAAL,IAAcb,QAAQ,CAAC,CAAD,CAA5B;AACA,QAAM,CAACc,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAAC,CAAD,CAA9B;AAEA,MAAIgB,SAAS,GAAGd,KAAhB;AACA,MAAIe,aAAJ;;AAEA,QAAMC,eAAe,GAAIC,CAAD,IAAO;AAC7BA,IAAAA,CAAC,CAACC,cAAF;AACAjB,IAAAA,QAAQ,CAACkB,MAAM,CAACF,CAAC,CAACG,MAAF,CAASC,KAAV,CAAP,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ,EAH6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GArBD;;AAyBA,sBACE;AAAA,4BACE;AAAA,6BACE;AAAO,QAAA,QAAQ,EAAEwB,KAAK,IAAIR,eAAe,CAACQ,KAAD,CAAzC;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAA,8BACE;AAAA,8BAAYxB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,4BAAUQ,GAAG,GAAG,CAAN,GAAU,CAAV,GAAcA,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,2BAASE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,4BAAUE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAME;AAAA,sCAAoBV,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA,sCAAoBE,WAAW,GAAG,CAAd,GAAkB,CAAlB,GAAsBA,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAA,wCAAsBE,aAAa,GAAG,CAAhB,GAAoB,CAApB,GAAwBA,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA9ED;;GAAMP,U;;KAAAA,U;AAgFN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst Calculator = () => {\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n\n  const [gross, setGross] = useState(0);\n  const [grossSetOne, setGrossSetOne] = useState(0); // 15000\n  const [grossSetTwo, setGrossSetTwo] = useState(0);  // gross - 15000\n  const [grossSetThree, setGrossSetThree] = useState(0); // gross - 50000\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState(0);\n\n  let grossCopy = gross;\n  let taxableAmount\n\n  const handleCalculate = (e) => {\n    e.preventDefault();\n    setGross(Number(e.target.value));\n    console.log(gross);\n    // if (e.target.value < 15000) {\n    //   setGrossSetOne(e.target.value);\n    //   setTax(0);\n    //   setHi(0);\n    // } else if (gross > 15000 && gross <= 50000) {\n    //   setGrossSetOne(15000);\n    //   setGrossSetTwo(e.target.value - 15000);\n    //   setTax(grossSetTwo * 0.2);\n    //   setHi(grossSetTwo * 0.12);\n    // } else {\n    //   setGrossSetOne(15000);\n    //   setGrossSetTwo(35000);\n    //   setGrossSetThree(e.target.value - 50000);\n    //   // tax = 7000 + (grossSetThree * 0.4)\n    //   // hi = 4200 + (grossSetThree * 0.02)\n    // }\n    // setNet(e.target.value - tax - hi);\n  }\n\n\n\n  return (\n    <div>\n      <form>\n        <input onSubmit={event => handleCalculate(event)} \n          type=\"number\"\n          min=\"0\"/>\n          {/* <button >Calculate</button> */}\n      </form>\n      <ul>\n        <li>Gross: {gross}</li>\n        <li>Tax: {tax < 0 ? 0 : tax}</li>\n        <li>HI: {hi}</li>\n        <li>Net: {net}</li>\n\n        <li>Gross Set One: {grossSetOne}</li>\n        <li>Gross Set Two: {grossSetTwo < 0 ? 0 : grossSetTwo}</li>\n        <li>Gross Set Three: {grossSetThree < 0 ? 0 : grossSetThree}</li>\n      </ul>\n    </div>\n  )\n  \n\n\n\n}\n\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calculator = () => {\n  _s();\n\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n  const [gross, setGross] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState();\n  let grossCopy = Number(gross);\n  let grossSetOne;\n  let grossSetTwo;\n  let grossSetThree;\n  let taxableAmount = Number();\n  let hiAmount = Number();\n\n  const handleTax = () => {\n    if (grossCopy > 15000 && grossCopy < 50001) {\n      setTax(grossSetTwo * 0.2);\n    } else if (grossCopy > 50000) {\n      taxableAmount = 7000 + grossSetThree * 0.4;\n      setTax(taxableAmount);\n    }\n  };\n\n  const handleHi = () => {\n    if (grossCopy > 15000 && grossCopy < 50001) {\n      setHi(grossSetTwo * 0.12);\n    } else if (grossCopy > 50000) {\n      hiAmount = 4200 + grossSetThree * 0.02;\n      setHi(hiAmount);\n    }\n  };\n\n  const handleNet = () => {\n    if (grossCopy < 15001) {\n      setNet(grossCopy);\n    } else if (grossCopy > 15000 && grossCopy < 50001) {\n      setNet(grossCopy - (taxableAmount + hiAmount));\n    } else if (grossCopy > 50000) {\n      setNet(grossCopy - (taxableAmount + hiAmount));\n    }\n  };\n\n  const handleCalculate = gr => {\n    if (gr < 15001) {\n      grossSetOne = gr;\n      console.log(grossSetOne);\n    } else if (gr > 15000 && gr <= 50000) {\n      grossSetOne = 15000;\n      grossSetTwo = gr - 15000;\n      handleTax();\n      handleHi();\n    } else {\n      grossSetOne = 15000;\n      grossSetTwo = 35000;\n      grossSetThree = gr - 50000;\n      handleTax();\n      handleHi();\n    }\n\n    handleNet();\n  };\n\n  const handleClear = () => {\n    setGross(0);\n    grossSetOne = 0;\n    grossSetTwo = 0;\n    grossSetThree = 0;\n    setTax(0);\n    setHi(0);\n    setNet(0);\n    document.getElementById(\"input\").value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input\",\n      type: \"number\",\n      min: \"0\",\n      onChange: e => setGross(+e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCalculate(grossCopy),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gross: \", gross]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Tax: \", tax]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"HI: \", hi]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Net: \", net]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calculator, \"t7Rle6mSeSzZwcO9Wi9tgd5Ck7o=\");\n\n_c = Calculator;\nexport default Calculator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"sources":["/Users/wxfc/Documents/Code/gallagher-calculator/gallagher-calculator/gallagher-calculator/gallagher-calculator-technical-task/src/views/calculator.js"],"names":["React","useState","Calculator","gross","setGross","tax","setTax","hi","setHi","net","setNet","grossCopy","Number","grossSetOne","grossSetTwo","grossSetThree","taxableAmount","hiAmount","handleTax","handleHi","handleNet","handleCalculate","gr","console","log","handleClear","document","getElementById","value","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst Calculator = () => {\n  // gross, tax, HI, net\n  // gross = user input value\n  // tax = gross * 0.2 && gross * 0.4\n  // HI = gross * 0.12 && gross * 0.02\n  // net = gross - tax - HI\n\n  // $15,000 >  : \n  //            net = gross \n  // $15,000 <  :\n  //            tax = gross * 0.2\n  //            HI = gross * 0.12\n  //            net = gross - tax - HI\n  // $50,000 <  :\n  //            tax = gross * 0.4\n  //            HI = gross * 0.02\n  //            net = gross - tax - HI\n\n  const [gross, setGross] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [hi, setHi] = useState(0);\n  const [net, setNet] = useState();\n\n  let grossCopy = Number(gross);\n  let grossSetOne\n  let grossSetTwo\n  let grossSetThree\n  let taxableAmount = Number()\n  let hiAmount = Number()\n\n  const handleTax = () => {\n    if (grossCopy > 15000 && grossCopy < 50001) {\n      setTax(grossSetTwo * 0.2);\n    } else if (grossCopy > 50000) {\n      taxableAmount = 7000 + (grossSetThree * 0.4)\n      setTax(taxableAmount);\n    }\n  }\n\n  const handleHi = () => {\n    if (grossCopy > 15000 && grossCopy < 50001) {\n      setHi(grossSetTwo * 0.12);\n    } else if (grossCopy > 50000) {\n      hiAmount = 4200 + (grossSetThree * 0.02)\n      setHi(hiAmount);\n    }\n  }\n\n  const handleNet = () => {\n    if (grossCopy < 15001) {\n      setNet(grossCopy);\n    } else if (grossCopy > 15000 && grossCopy < 50001) {\n      setNet(grossCopy - (taxableAmount + hiAmount));\n    } else if (grossCopy > 50000) {\n      setNet(grossCopy - (taxableAmount + hiAmount));\n    }\n  }\n\n\n  const handleCalculate = (gr) => {\n    if (gr < 15001) {\n      grossSetOne = gr\n      console.log(grossSetOne)\n    } else if (gr > 15000 && gr <= 50000) {\n      grossSetOne = 15000\n      grossSetTwo = gr - 15000;\n      handleTax();\n      handleHi();\n    } else {\n      grossSetOne = 15000;\n      grossSetTwo = 35000;\n      grossSetThree = gr - 50000;\n      handleTax();\n      handleHi();\n    }\n    handleNet();\n  }\n\n  const handleClear = () => {\n    setGross(0);\n    grossSetOne = 0;\n    grossSetTwo = 0;\n    grossSetThree = 0;\n    setTax(0);\n    setHi(0);\n    setNet(0);\n    document.getElementById(\"input\").value = \"\";\n  }\n\n\n  return (\n    <div>\n        <input \n          id=\"input\"\n          type=\"number\"\n          min=\"0\"\n          onChange={(e)=> setGross(+e.target.value)}/>\n          <button onClick={()=> handleCalculate(grossCopy)}>Calculate</button>\n          <button onClick={handleClear}>Reset</button>\n      <ul>\n        <li>Gross: {gross}</li>\n        <li>Tax: {tax}</li>\n        <li>HI: {hi}</li>\n        <li>Net: {net}</li>\n      </ul>\n    </div>\n  )\n  \n\n\n\n}\n\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}